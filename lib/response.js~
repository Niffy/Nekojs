'use strict';

var http = require('http'),
    helpers = require('helpers'),
    mime = require('mime');

/**
 *  Our response class
 *  @return {Res}
 *  @api public
 */ 
class Response extends http.ServerResponse {

  /**
   *  Defines the main properties
   *  @constructor
   *  @return {Res}
   *  @api privte
   */  
  constructor() {

  }

  /**
   *  Returns a header
   *  @param {String} name
   *  @return {String|Undefined}
   *  @api public
   */
  get(name) {
    return this.getHeader(name);
  }

  /**
   *  Sets a header
   *  @param {String} name
   *  @param {String} value
   *  @return {String}
   *  @api public
   */
  set(name, value) {
    return this.setHeader(name, value);
  }

  /**
   *  Sets a status code.
   *  @param {Number} code
   *  @api public
   */
  status(code) {
    this.statusCode = code;
    return this;
  }

  /**
   *  Sends a response.
   *  @param {String|Number|Boolean|Object|Buffer} body
   *  api public
   */
  send(body) {
    var chunk, encoding, len, req, type;

    req = this.req;
    chunk = body;

    if (arguments.length === 2) {
      throw new Error('res.send() - takes only one argument');
    }

    // Ensure we deal with the response body correctly
    switch (typeof chunk) {

      // Meh strings
      case 'string':
        encoding = 'utf8';
        if (!this.get('Content-Type')) {
          this.type('html');
        }
        type = this.get('Content-Type');
        if (typeof type === 'string') {
          this.set('Content-Type', helpers.charset(type, 'utf-8'));
        }
        break;

      // Most other things
      case 'boolean':
      case 'object':
      case 'number':
        if (chunk === null) {
          chunk = '';
        }
        break;
    }

    // Skip sending the body for a HEAD request
    if (req.method.toLowerCase() === 'head') {
      this.end();
    } else {
      this.end(chunk, encoding);
    }
  }

  /**
   *  Sets the content type
   */
  type(type) {
    return this.set('Content-Type', ~type.indexOf('/')
      ? type
      : mime.find(type));
  }
}

/**
 *  Export the response module
 */
module.exports = Response;